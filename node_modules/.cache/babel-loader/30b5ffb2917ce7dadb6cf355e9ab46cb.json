{"ast":null,"code":"// import { firestore } from \"../../firebase\";\n//\nconst bucket_db = firestore.collection(\"bucket\"); // Actions\n\nconst LOAD = \"question/LOAD\";\nconst UPDATE = \"bucket/UPDATE\";\nconst LOADED = \"bucket/LOADED\";\nconst initialState = {\n  list: [{\n    text: \"Q1\",\n    completed: false\n  }, {\n    text: \"Q2\",\n    completed: false\n  }, {\n    text: \"Q3\",\n    completed: false\n  }],\n  is_loaded: false\n}; // Action Creators\n\nexport const loadBucket = bucket => {\n  return {\n    type: LOAD,\n    bucket\n  };\n};\nexport const updateBucket = bucket => {\n  return {\n    type: UPDATE,\n    bucket\n  };\n};\nexport const isLoaded = loaded => {\n  return {\n    type: LOADED,\n    loaded\n  };\n};\nexport const loadBucketFB = () => {\n  return function (dispatch) {\n    bucket_db.get().then(docs => {\n      let bucket_data = [];\n      docs.forEach(doc => {\n        if (doc.exists) {\n          bucket_data = [...bucket_data, {\n            id: doc.id,\n            ...doc.data()\n          }];\n        }\n      });\n      console.log(bucket_data);\n      dispatch(loadBucket(bucket_data));\n    });\n  };\n};\nexport const updateBucketFB = bucket => {\n  return function (dispatch, getState) {\n    const _bucket_data = getState().bucket.list[bucket];\n    let bucket_data = { ..._bucket_data,\n      completed: true\n    };\n\n    if (!bucket_data.id) {\n      return;\n    }\n\n    bucket_db.doc(bucket_data.id).update(bucket_data).then(docRef => {\n      dispatch(updateBucket(bucket));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; // Reducer\n\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case \"bucket/LOAD\":\n      {\n        if (action.bucket.length > 0) {\n          return {\n            list: action.bucket,\n            is_loaded: true\n          };\n        }\n\n        return state;\n      }\n\n    case \"bucket/UPDATE\":\n      {\n        const bucket_list = state.list.map((l, idx) => {\n          if (idx === action.bucket) {\n            return { ...l,\n              completed: true\n            };\n          } else {\n            return l;\n          }\n        });\n        return {\n          list: bucket_list\n        };\n      }\n\n    case \"bucket/LOADED\":\n      {\n        return { ...state,\n          is_loaded: action.loaded\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/SM-PC/GDproject/character_test/src/redux/modules/question.js"],"names":["bucket_db","firestore","collection","LOAD","UPDATE","LOADED","initialState","list","text","completed","is_loaded","loadBucket","bucket","type","updateBucket","isLoaded","loaded","loadBucketFB","dispatch","get","then","docs","bucket_data","forEach","doc","exists","id","data","console","log","updateBucketFB","getState","_bucket_data","update","docRef","catch","error","reducer","state","action","length","bucket_list","map","l","idx"],"mappings":"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","sourcesContent":["// import { firestore } from \"../../firebase\";\r\n//\r\n const bucket_db = firestore.collection(\"bucket\");\r\n\r\n// Actions\r\nconst LOAD = \"question/LOAD\";\r\nconst UPDATE = \"bucket/UPDATE\";\r\nconst LOADED = \"bucket/LOADED\";\r\n\r\nconst initialState = {\r\n    list: [\r\n        { text: \"Q1\", completed: false },\r\n        { text: \"Q2\", completed: false },\r\n        { text: \"Q3\", completed: false },\r\n    ],\r\n    is_loaded: false,\r\n};\r\n\r\n// Action Creators\r\nexport const loadBucket = (bucket) => {\r\n    return { type: LOAD, bucket };\r\n};\r\n\r\nexport const updateBucket = (bucket) => {\r\n    return { type: UPDATE, bucket };\r\n};\r\n\r\nexport const isLoaded = (loaded) => {\r\n    return { type: LOADED, loaded };\r\n};\r\n\r\nexport const loadBucketFB = () => {\r\n    return function (dispatch) {\r\n        bucket_db.get().then((docs) => {\r\n            let bucket_data = [];\r\n\r\n            docs.forEach((doc) => {\r\n                if (doc.exists) {\r\n                    bucket_data = [...bucket_data, { id: doc.id, ...doc.data() }];\r\n                }\r\n            });\r\n\r\n            console.log(bucket_data);\r\n\r\n            dispatch(loadBucket(bucket_data));\r\n        });\r\n    };\r\n};\r\n\r\nexport const updateBucketFB = (bucket) => {\r\n    return function (dispatch, getState) {\r\n        const _bucket_data = getState().bucket.list[bucket];\r\n\r\n        let bucket_data = { ..._bucket_data, completed: true };\r\n\r\n        if (!bucket_data.id) {\r\n            return;\r\n        }\r\n\r\n        bucket_db\r\n            .doc(bucket_data.id)\r\n            .update(bucket_data)\r\n            .then((docRef) => {\r\n                dispatch(updateBucket(bucket));\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n};\r\n\r\n\r\n\r\n// Reducer\r\nexport default function reducer(state = initialState, action = {}) {\r\n    switch (action.type) {\r\n        case \"bucket/LOAD\": {\r\n            if (action.bucket.length > 0) {\r\n                return { list: action.bucket, is_loaded: true };\r\n            }\r\n            return state;\r\n        }\r\n\r\n        case \"bucket/UPDATE\": {\r\n            const bucket_list = state.list.map((l, idx) => {\r\n                if (idx === action.bucket) {\r\n                    return { ...l, completed: true };\r\n                } else {\r\n                    return l;\r\n                }\r\n            });\r\n            return { list: bucket_list };\r\n        }\r\n\r\n        case \"bucket/LOADED\": {\r\n            return { ...state, is_loaded: action.loaded };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}